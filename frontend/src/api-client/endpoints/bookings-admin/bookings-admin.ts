/**
 * Generated by orval v7.12.2 üç∫
 * Do not edit manually.
 * Your Project API
 * Your project description
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { Booking, PatchedBooking } from "../../schemas";

import { customRequest } from "../../custom-client";

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> =
  (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y ? 1 : 2 ? A : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<
    { [Q in P]: T[P] },
    { -readonly [Q in P]: T[P] },
    P
  >;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (
  k: infer I,
) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object
        ? NonReadonly<NonNullable<T[P]>>
        : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

export const bookingsAdminList = (signal?: AbortSignal) => {
  return customRequest<Booking[]>({
    url: `/api/bookings-admin/`,
    method: "GET",
    signal,
  });
};

export const getBookingsAdminListQueryKey = () => {
  return [`/api/bookings-admin/`] as const;
};

export const getBookingsAdminListQueryOptions = <
  TData = Awaited<ReturnType<typeof bookingsAdminList>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof bookingsAdminList>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getBookingsAdminListQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof bookingsAdminList>>
  > = ({ signal }) => bookingsAdminList(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof bookingsAdminList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type BookingsAdminListQueryResult = NonNullable<
  Awaited<ReturnType<typeof bookingsAdminList>>
>;
export type BookingsAdminListQueryError = unknown;

export function useBookingsAdminList<
  TData = Awaited<ReturnType<typeof bookingsAdminList>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof bookingsAdminList>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof bookingsAdminList>>,
          TError,
          Awaited<ReturnType<typeof bookingsAdminList>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useBookingsAdminList<
  TData = Awaited<ReturnType<typeof bookingsAdminList>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof bookingsAdminList>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof bookingsAdminList>>,
          TError,
          Awaited<ReturnType<typeof bookingsAdminList>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useBookingsAdminList<
  TData = Awaited<ReturnType<typeof bookingsAdminList>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof bookingsAdminList>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useBookingsAdminList<
  TData = Awaited<ReturnType<typeof bookingsAdminList>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof bookingsAdminList>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getBookingsAdminListQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const bookingsAdminCreate = (
  booking: NonReadonly<Booking>,
  signal?: AbortSignal,
) => {
  return customRequest<Booking>({
    url: `/api/bookings-admin/`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: booking,
    signal,
  });
};

export const getBookingsAdminCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof bookingsAdminCreate>>,
    TError,
    { data: NonReadonly<Booking> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof bookingsAdminCreate>>,
  TError,
  { data: NonReadonly<Booking> },
  TContext
> => {
  const mutationKey = ["bookingsAdminCreate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof bookingsAdminCreate>>,
    { data: NonReadonly<Booking> }
  > = (props) => {
    const { data } = props ?? {};

    return bookingsAdminCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type BookingsAdminCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof bookingsAdminCreate>>
>;
export type BookingsAdminCreateMutationBody = NonReadonly<Booking>;
export type BookingsAdminCreateMutationError = unknown;

export const useBookingsAdminCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof bookingsAdminCreate>>,
      TError,
      { data: NonReadonly<Booking> },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof bookingsAdminCreate>>,
  TError,
  { data: NonReadonly<Booking> },
  TContext
> => {
  const mutationOptions = getBookingsAdminCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const bookingsAdminRetrieve = (id: number, signal?: AbortSignal) => {
  return customRequest<Booking>({
    url: `/api/bookings-admin/${id}/`,
    method: "GET",
    signal,
  });
};

export const getBookingsAdminRetrieveQueryKey = (id?: number) => {
  return [`/api/bookings-admin/${id}/`] as const;
};

export const getBookingsAdminRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof bookingsAdminRetrieve>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof bookingsAdminRetrieve>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getBookingsAdminRetrieveQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof bookingsAdminRetrieve>>
  > = ({ signal }) => bookingsAdminRetrieve(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof bookingsAdminRetrieve>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type BookingsAdminRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof bookingsAdminRetrieve>>
>;
export type BookingsAdminRetrieveQueryError = unknown;

export function useBookingsAdminRetrieve<
  TData = Awaited<ReturnType<typeof bookingsAdminRetrieve>>,
  TError = unknown,
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof bookingsAdminRetrieve>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof bookingsAdminRetrieve>>,
          TError,
          Awaited<ReturnType<typeof bookingsAdminRetrieve>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useBookingsAdminRetrieve<
  TData = Awaited<ReturnType<typeof bookingsAdminRetrieve>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof bookingsAdminRetrieve>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof bookingsAdminRetrieve>>,
          TError,
          Awaited<ReturnType<typeof bookingsAdminRetrieve>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useBookingsAdminRetrieve<
  TData = Awaited<ReturnType<typeof bookingsAdminRetrieve>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof bookingsAdminRetrieve>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useBookingsAdminRetrieve<
  TData = Awaited<ReturnType<typeof bookingsAdminRetrieve>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof bookingsAdminRetrieve>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getBookingsAdminRetrieveQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const bookingsAdminUpdate = (
  id: number,
  booking: NonReadonly<Booking>,
) => {
  return customRequest<Booking>({
    url: `/api/bookings-admin/${id}/`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: booking,
  });
};

export const getBookingsAdminUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof bookingsAdminUpdate>>,
    TError,
    { id: number; data: NonReadonly<Booking> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof bookingsAdminUpdate>>,
  TError,
  { id: number; data: NonReadonly<Booking> },
  TContext
> => {
  const mutationKey = ["bookingsAdminUpdate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof bookingsAdminUpdate>>,
    { id: number; data: NonReadonly<Booking> }
  > = (props) => {
    const { id, data } = props ?? {};

    return bookingsAdminUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type BookingsAdminUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof bookingsAdminUpdate>>
>;
export type BookingsAdminUpdateMutationBody = NonReadonly<Booking>;
export type BookingsAdminUpdateMutationError = unknown;

export const useBookingsAdminUpdate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof bookingsAdminUpdate>>,
      TError,
      { id: number; data: NonReadonly<Booking> },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof bookingsAdminUpdate>>,
  TError,
  { id: number; data: NonReadonly<Booking> },
  TContext
> => {
  const mutationOptions = getBookingsAdminUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const bookingsAdminPartialUpdate = (
  id: number,
  patchedBooking: NonReadonly<PatchedBooking>,
) => {
  return customRequest<Booking>({
    url: `/api/bookings-admin/${id}/`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: patchedBooking,
  });
};

export const getBookingsAdminPartialUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof bookingsAdminPartialUpdate>>,
    TError,
    { id: number; data: NonReadonly<PatchedBooking> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof bookingsAdminPartialUpdate>>,
  TError,
  { id: number; data: NonReadonly<PatchedBooking> },
  TContext
> => {
  const mutationKey = ["bookingsAdminPartialUpdate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof bookingsAdminPartialUpdate>>,
    { id: number; data: NonReadonly<PatchedBooking> }
  > = (props) => {
    const { id, data } = props ?? {};

    return bookingsAdminPartialUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type BookingsAdminPartialUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof bookingsAdminPartialUpdate>>
>;
export type BookingsAdminPartialUpdateMutationBody =
  NonReadonly<PatchedBooking>;
export type BookingsAdminPartialUpdateMutationError = unknown;

export const useBookingsAdminPartialUpdate = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof bookingsAdminPartialUpdate>>,
      TError,
      { id: number; data: NonReadonly<PatchedBooking> },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof bookingsAdminPartialUpdate>>,
  TError,
  { id: number; data: NonReadonly<PatchedBooking> },
  TContext
> => {
  const mutationOptions = getBookingsAdminPartialUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const bookingsAdminDestroy = (id: number) => {
  return customRequest<void>({
    url: `/api/bookings-admin/${id}/`,
    method: "DELETE",
  });
};

export const getBookingsAdminDestroyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof bookingsAdminDestroy>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof bookingsAdminDestroy>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ["bookingsAdminDestroy"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof bookingsAdminDestroy>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return bookingsAdminDestroy(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type BookingsAdminDestroyMutationResult = NonNullable<
  Awaited<ReturnType<typeof bookingsAdminDestroy>>
>;

export type BookingsAdminDestroyMutationError = unknown;

export const useBookingsAdminDestroy = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof bookingsAdminDestroy>>,
      TError,
      { id: number },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof bookingsAdminDestroy>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getBookingsAdminDestroyMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const bookingsAdminCancelDestroy = (id: number) => {
  return customRequest<void>({
    url: `/api/bookings-admin/${id}/cancel/`,
    method: "DELETE",
  });
};

export const getBookingsAdminCancelDestroyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof bookingsAdminCancelDestroy>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof bookingsAdminCancelDestroy>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ["bookingsAdminCancelDestroy"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof bookingsAdminCancelDestroy>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return bookingsAdminCancelDestroy(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type BookingsAdminCancelDestroyMutationResult = NonNullable<
  Awaited<ReturnType<typeof bookingsAdminCancelDestroy>>
>;

export type BookingsAdminCancelDestroyMutationError = unknown;

export const useBookingsAdminCancelDestroy = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof bookingsAdminCancelDestroy>>,
      TError,
      { id: number },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof bookingsAdminCancelDestroy>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getBookingsAdminCancelDestroyMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
