/**
 * Generated by orval v7.12.2 üç∫
 * Do not edit manually.
 * Your Project API
 * Your project description
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  CourtlyTokenObtainPair,
  Register,
  TokenRefresh,
} from "../../schemas";

import { customRequest } from "../../custom-client";

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> =
  (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y ? 1 : 2 ? A : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<
    { [Q in P]: T[P] },
    { -readonly [Q in P]: T[P] },
    P
  >;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (
  k: infer I,
) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object
        ? NonReadonly<NonNullable<T[P]>>
        : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

/**
 * POST /api/auth/login/ with {username,password} or {email,password}
Returns: {access, refresh}
 */
export const authLoginCreate = (
  courtlyTokenObtainPair: CourtlyTokenObtainPair,
  signal?: AbortSignal,
) => {
  return customRequest<CourtlyTokenObtainPair>({
    url: `/api/auth/login/`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: courtlyTokenObtainPair,
    signal,
  });
};

export const getAuthLoginCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authLoginCreate>>,
    TError,
    { data: CourtlyTokenObtainPair },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authLoginCreate>>,
  TError,
  { data: CourtlyTokenObtainPair },
  TContext
> => {
  const mutationKey = ["authLoginCreate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authLoginCreate>>,
    { data: CourtlyTokenObtainPair }
  > = (props) => {
    const { data } = props ?? {};

    return authLoginCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthLoginCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof authLoginCreate>>
>;
export type AuthLoginCreateMutationBody = CourtlyTokenObtainPair;
export type AuthLoginCreateMutationError = unknown;

export const useAuthLoginCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authLoginCreate>>,
      TError,
      { data: CourtlyTokenObtainPair },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof authLoginCreate>>,
  TError,
  { data: CourtlyTokenObtainPair },
  TContext
> => {
  const mutationOptions = getAuthLoginCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const authMeRetrieve = (signal?: AbortSignal) => {
  return customRequest<void>({ url: `/api/auth/me/`, method: "GET", signal });
};

export const getAuthMeRetrieveQueryKey = () => {
  return [`/api/auth/me/`] as const;
};

export const getAuthMeRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof authMeRetrieve>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof authMeRetrieve>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAuthMeRetrieveQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof authMeRetrieve>>> = ({
    signal,
  }) => authMeRetrieve(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof authMeRetrieve>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AuthMeRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof authMeRetrieve>>
>;
export type AuthMeRetrieveQueryError = unknown;

export function useAuthMeRetrieve<
  TData = Awaited<ReturnType<typeof authMeRetrieve>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof authMeRetrieve>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof authMeRetrieve>>,
          TError,
          Awaited<ReturnType<typeof authMeRetrieve>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAuthMeRetrieve<
  TData = Awaited<ReturnType<typeof authMeRetrieve>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof authMeRetrieve>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof authMeRetrieve>>,
          TError,
          Awaited<ReturnType<typeof authMeRetrieve>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAuthMeRetrieve<
  TData = Awaited<ReturnType<typeof authMeRetrieve>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof authMeRetrieve>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useAuthMeRetrieve<
  TData = Awaited<ReturnType<typeof authMeRetrieve>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof authMeRetrieve>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAuthMeRetrieveQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * POST /api/auth/register/
Body accepts: username, email, password, confirm, firstname, lastname, accept
(serializer mapittaa firstname/lastname -> first_name/last_name)
 */
export const authRegisterCreate = (
  register: Register,
  signal?: AbortSignal,
) => {
  return customRequest<Register>({
    url: `/api/auth/register/`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: register,
    signal,
  });
};

export const getAuthRegisterCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authRegisterCreate>>,
    TError,
    { data: Register },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authRegisterCreate>>,
  TError,
  { data: Register },
  TContext
> => {
  const mutationKey = ["authRegisterCreate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authRegisterCreate>>,
    { data: Register }
  > = (props) => {
    const { data } = props ?? {};

    return authRegisterCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthRegisterCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof authRegisterCreate>>
>;
export type AuthRegisterCreateMutationBody = Register;
export type AuthRegisterCreateMutationError = unknown;

export const useAuthRegisterCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authRegisterCreate>>,
      TError,
      { data: Register },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof authRegisterCreate>>,
  TError,
  { data: Register },
  TContext
> => {
  const mutationOptions = getAuthRegisterCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Takes a refresh type JSON web token and returns an access type JSON web
token if the refresh token is valid.
 */
export const authTokenRefreshCreate = (
  tokenRefresh: NonReadonly<TokenRefresh>,
  signal?: AbortSignal,
) => {
  return customRequest<TokenRefresh>({
    url: `/api/auth/token/refresh/`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: tokenRefresh,
    signal,
  });
};

export const getAuthTokenRefreshCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authTokenRefreshCreate>>,
    TError,
    { data: NonReadonly<TokenRefresh> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authTokenRefreshCreate>>,
  TError,
  { data: NonReadonly<TokenRefresh> },
  TContext
> => {
  const mutationKey = ["authTokenRefreshCreate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authTokenRefreshCreate>>,
    { data: NonReadonly<TokenRefresh> }
  > = (props) => {
    const { data } = props ?? {};

    return authTokenRefreshCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthTokenRefreshCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof authTokenRefreshCreate>>
>;
export type AuthTokenRefreshCreateMutationBody = NonReadonly<TokenRefresh>;
export type AuthTokenRefreshCreateMutationError = unknown;

export const useAuthTokenRefreshCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authTokenRefreshCreate>>,
      TError,
      { data: NonReadonly<TokenRefresh> },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof authTokenRefreshCreate>>,
  TError,
  { data: NonReadonly<TokenRefresh> },
  TContext
> => {
  const mutationOptions = getAuthTokenRefreshCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
