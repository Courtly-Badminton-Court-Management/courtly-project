/**
 * Generated by orval v7.12.2 🍺
 * Do not edit manually.
 * Your Project API
 * Your project description
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { Slot } from "../../schemas";

import { customRequest } from "../../custom-client";

export const slotsList = (signal?: AbortSignal) => {
  return customRequest<Slot[]>({ url: `/api/slots/`, method: "GET", signal });
};

export const getSlotsListQueryKey = () => {
  return [`/api/slots/`] as const;
};

export const getSlotsListQueryOptions = <
  TData = Awaited<ReturnType<typeof slotsList>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof slotsList>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSlotsListQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof slotsList>>> = ({
    signal,
  }) => slotsList(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof slotsList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SlotsListQueryResult = NonNullable<
  Awaited<ReturnType<typeof slotsList>>
>;
export type SlotsListQueryError = unknown;

export function useSlotsList<
  TData = Awaited<ReturnType<typeof slotsList>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof slotsList>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof slotsList>>,
          TError,
          Awaited<ReturnType<typeof slotsList>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSlotsList<
  TData = Awaited<ReturnType<typeof slotsList>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof slotsList>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof slotsList>>,
          TError,
          Awaited<ReturnType<typeof slotsList>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSlotsList<
  TData = Awaited<ReturnType<typeof slotsList>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof slotsList>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSlotsList<
  TData = Awaited<ReturnType<typeof slotsList>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof slotsList>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSlotsListQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const slotsRetrieve = (id: number, signal?: AbortSignal) => {
  return customRequest<Slot>({
    url: `/api/slots/${id}/`,
    method: "GET",
    signal,
  });
};

export const getSlotsRetrieveQueryKey = (id?: number) => {
  return [`/api/slots/${id}/`] as const;
};

export const getSlotsRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof slotsRetrieve>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof slotsRetrieve>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSlotsRetrieveQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof slotsRetrieve>>> = ({
    signal,
  }) => slotsRetrieve(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof slotsRetrieve>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SlotsRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof slotsRetrieve>>
>;
export type SlotsRetrieveQueryError = unknown;

export function useSlotsRetrieve<
  TData = Awaited<ReturnType<typeof slotsRetrieve>>,
  TError = unknown,
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof slotsRetrieve>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof slotsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof slotsRetrieve>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSlotsRetrieve<
  TData = Awaited<ReturnType<typeof slotsRetrieve>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof slotsRetrieve>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof slotsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof slotsRetrieve>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSlotsRetrieve<
  TData = Awaited<ReturnType<typeof slotsRetrieve>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof slotsRetrieve>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSlotsRetrieve<
  TData = Awaited<ReturnType<typeof slotsRetrieve>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof slotsRetrieve>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSlotsRetrieveQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * POST /api/slots/<slot_id>/set-status/<new_status>/
Only managers can manually change slot statuses.
 */
export const slotsSetStatusCreate = (
  slotId: number,
  newStatus: string,
  signal?: AbortSignal,
) => {
  return customRequest<void>({
    url: `/api/slots/${slotId}/set-status/${newStatus}/`,
    method: "POST",
    signal,
  });
};

export const getSlotsSetStatusCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof slotsSetStatusCreate>>,
    TError,
    { slotId: number; newStatus: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof slotsSetStatusCreate>>,
  TError,
  { slotId: number; newStatus: string },
  TContext
> => {
  const mutationKey = ["slotsSetStatusCreate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof slotsSetStatusCreate>>,
    { slotId: number; newStatus: string }
  > = (props) => {
    const { slotId, newStatus } = props ?? {};

    return slotsSetStatusCreate(slotId, newStatus);
  };

  return { mutationFn, ...mutationOptions };
};

export type SlotsSetStatusCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof slotsSetStatusCreate>>
>;

export type SlotsSetStatusCreateMutationError = unknown;

export const useSlotsSetStatusCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof slotsSetStatusCreate>>,
      TError,
      { slotId: number; newStatus: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof slotsSetStatusCreate>>,
  TError,
  { slotId: number; newStatus: string },
  TContext
> => {
  const mutationOptions = getSlotsSetStatusCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * GET /api/slots/month-view?club=1&month=2025-09
 */
export const slotsMonthViewRetrieve = (signal?: AbortSignal) => {
  return customRequest<Slot>({
    url: `/api/slots/month-view/`,
    method: "GET",
    signal,
  });
};

export const getSlotsMonthViewRetrieveQueryKey = () => {
  return [`/api/slots/month-view/`] as const;
};

export const getSlotsMonthViewRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof slotsMonthViewRetrieve>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof slotsMonthViewRetrieve>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSlotsMonthViewRetrieveQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof slotsMonthViewRetrieve>>
  > = ({ signal }) => slotsMonthViewRetrieve(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof slotsMonthViewRetrieve>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SlotsMonthViewRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof slotsMonthViewRetrieve>>
>;
export type SlotsMonthViewRetrieveQueryError = unknown;

export function useSlotsMonthViewRetrieve<
  TData = Awaited<ReturnType<typeof slotsMonthViewRetrieve>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof slotsMonthViewRetrieve>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof slotsMonthViewRetrieve>>,
          TError,
          Awaited<ReturnType<typeof slotsMonthViewRetrieve>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSlotsMonthViewRetrieve<
  TData = Awaited<ReturnType<typeof slotsMonthViewRetrieve>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof slotsMonthViewRetrieve>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof slotsMonthViewRetrieve>>,
          TError,
          Awaited<ReturnType<typeof slotsMonthViewRetrieve>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSlotsMonthViewRetrieve<
  TData = Awaited<ReturnType<typeof slotsMonthViewRetrieve>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof slotsMonthViewRetrieve>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSlotsMonthViewRetrieve<
  TData = Awaited<ReturnType<typeof slotsMonthViewRetrieve>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof slotsMonthViewRetrieve>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSlotsMonthViewRetrieveQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
