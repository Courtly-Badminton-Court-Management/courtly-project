/**
 * Generated by orval v7.12.2 🍺
 * Do not edit manually.
 * Your Project API
 * Your project description
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";

import { customRequest } from "../../custom-client";

/**
 * รับ payload:
{
  "club": 1,
  "items": [
    {"court":4,"date":"2025-09-05","start":"10:00","end":"12:00"}
  ]
}
- ล็อกแถว Slot ที่เกี่ยวข้องด้วย select_for_update(OF SELF)
- ตรวจว่า slot ทุกตัว status=available
- สร้าง Booking + BookingSlot
- อัปเดต SlotStatus เป็น booked
 */
export const bookingsCreate = (signal?: AbortSignal) => {
  return customRequest<void>({ url: `/api/bookings/`, method: "POST", signal });
};

export const getBookingsCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof bookingsCreate>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof bookingsCreate>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["bookingsCreate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof bookingsCreate>>,
    void
  > = () => {
    return bookingsCreate();
  };

  return { mutationFn, ...mutationOptions };
};

export type BookingsCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof bookingsCreate>>
>;

export type BookingsCreateMutationError = unknown;

export const useBookingsCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof bookingsCreate>>,
      TError,
      void,
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof bookingsCreate>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getBookingsCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
