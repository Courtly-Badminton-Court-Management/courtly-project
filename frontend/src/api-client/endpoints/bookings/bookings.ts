/**
 * Generated by orval v7.12.2 🍺
 * Do not edit manually.
 * Your Project API
 * Your project description
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { Booking } from "../../schemas";

import { customRequest } from "../../custom-client";

/**
 * List all recent bookings (for admin or manager view).
GET /api/bookings/
 */
export const bookingsRetrieve = (signal?: AbortSignal) => {
  return customRequest<void>({ url: `/api/bookings/`, method: "GET", signal });
};

export const getBookingsRetrieveQueryKey = () => {
  return [`/api/bookings/`] as const;
};

export const getBookingsRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof bookingsRetrieve>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof bookingsRetrieve>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getBookingsRetrieveQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof bookingsRetrieve>>
  > = ({ signal }) => bookingsRetrieve(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof bookingsRetrieve>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type BookingsRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof bookingsRetrieve>>
>;
export type BookingsRetrieveQueryError = unknown;

export function useBookingsRetrieve<
  TData = Awaited<ReturnType<typeof bookingsRetrieve>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof bookingsRetrieve>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof bookingsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof bookingsRetrieve>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useBookingsRetrieve<
  TData = Awaited<ReturnType<typeof bookingsRetrieve>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof bookingsRetrieve>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof bookingsRetrieve>>,
          TError,
          Awaited<ReturnType<typeof bookingsRetrieve>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useBookingsRetrieve<
  TData = Awaited<ReturnType<typeof bookingsRetrieve>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof bookingsRetrieve>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useBookingsRetrieve<
  TData = Awaited<ReturnType<typeof bookingsRetrieve>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof bookingsRetrieve>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getBookingsRetrieveQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * CRUD operations for Booking.
Supports lookup by booking_no instead of primary key.
 */
export const bookingsRetrieve2 = (bookingNo: string, signal?: AbortSignal) => {
  return customRequest<Booking>({
    url: `/api/bookings/${bookingNo}/`,
    method: "GET",
    signal,
  });
};

export const getBookingsRetrieve2QueryKey = (bookingNo?: string) => {
  return [`/api/bookings/${bookingNo}/`] as const;
};

export const getBookingsRetrieve2QueryOptions = <
  TData = Awaited<ReturnType<typeof bookingsRetrieve2>>,
  TError = unknown,
>(
  bookingNo: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof bookingsRetrieve2>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getBookingsRetrieve2QueryKey(bookingNo);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof bookingsRetrieve2>>
  > = ({ signal }) => bookingsRetrieve2(bookingNo, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!bookingNo,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof bookingsRetrieve2>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type BookingsRetrieve2QueryResult = NonNullable<
  Awaited<ReturnType<typeof bookingsRetrieve2>>
>;
export type BookingsRetrieve2QueryError = unknown;

export function useBookingsRetrieve2<
  TData = Awaited<ReturnType<typeof bookingsRetrieve2>>,
  TError = unknown,
>(
  bookingNo: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof bookingsRetrieve2>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof bookingsRetrieve2>>,
          TError,
          Awaited<ReturnType<typeof bookingsRetrieve2>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useBookingsRetrieve2<
  TData = Awaited<ReturnType<typeof bookingsRetrieve2>>,
  TError = unknown,
>(
  bookingNo: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof bookingsRetrieve2>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof bookingsRetrieve2>>,
          TError,
          Awaited<ReturnType<typeof bookingsRetrieve2>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useBookingsRetrieve2<
  TData = Awaited<ReturnType<typeof bookingsRetrieve2>>,
  TError = unknown,
>(
  bookingNo: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof bookingsRetrieve2>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useBookingsRetrieve2<
  TData = Awaited<ReturnType<typeof bookingsRetrieve2>>,
  TError = unknown,
>(
  bookingNo: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof bookingsRetrieve2>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getBookingsRetrieve2QueryOptions(bookingNo, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Cancel a booking using its booking_no.

Endpoint:
  POST /api/bookings/<booking_no>/cancel/
 */
export const bookingsCancelCreate = (
  bookingNo: string,
  signal?: AbortSignal,
) => {
  return customRequest<void>({
    url: `/api/bookings/${bookingNo}/cancel/`,
    method: "POST",
    signal,
  });
};

export const getBookingsCancelCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof bookingsCancelCreate>>,
    TError,
    { bookingNo: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof bookingsCancelCreate>>,
  TError,
  { bookingNo: string },
  TContext
> => {
  const mutationKey = ["bookingsCancelCreate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof bookingsCancelCreate>>,
    { bookingNo: string }
  > = (props) => {
    const { bookingNo } = props ?? {};

    return bookingsCancelCreate(bookingNo);
  };

  return { mutationFn, ...mutationOptions };
};

export type BookingsCancelCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof bookingsCancelCreate>>
>;

export type BookingsCancelCreateMutationError = unknown;

export const useBookingsCancelCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof bookingsCancelCreate>>,
      TError,
      { bookingNo: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof bookingsCancelCreate>>,
  TError,
  { bookingNo: string },
  TContext
> => {
  const mutationOptions = getBookingsCancelCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
