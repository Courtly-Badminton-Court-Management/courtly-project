/**
 * Generated by orval v7.12.2 🍺
 * Do not edit manually.
 * Your Project API
 * Your project description
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import { customRequest } from "../../custom-client";

export const walletMeRetrieve = (signal?: AbortSignal) => {
  return customRequest<void>({ url: `/api/wallet/me/`, method: "GET", signal });
};

export const getWalletMeRetrieveQueryKey = () => {
  return [`/api/wallet/me/`] as const;
};

export const getWalletMeRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof walletMeRetrieve>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof walletMeRetrieve>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getWalletMeRetrieveQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof walletMeRetrieve>>
  > = ({ signal }) => walletMeRetrieve(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof walletMeRetrieve>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type WalletMeRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof walletMeRetrieve>>
>;
export type WalletMeRetrieveQueryError = unknown;

export function useWalletMeRetrieve<
  TData = Awaited<ReturnType<typeof walletMeRetrieve>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof walletMeRetrieve>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof walletMeRetrieve>>,
          TError,
          Awaited<ReturnType<typeof walletMeRetrieve>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWalletMeRetrieve<
  TData = Awaited<ReturnType<typeof walletMeRetrieve>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof walletMeRetrieve>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof walletMeRetrieve>>,
          TError,
          Awaited<ReturnType<typeof walletMeRetrieve>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWalletMeRetrieve<
  TData = Awaited<ReturnType<typeof walletMeRetrieve>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof walletMeRetrieve>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useWalletMeRetrieve<
  TData = Awaited<ReturnType<typeof walletMeRetrieve>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof walletMeRetrieve>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getWalletMeRetrieveQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const walletWalletBalanceRetrieve = (signal?: AbortSignal) => {
  return customRequest<void>({
    url: `/api/wallet/wallet/balance/`,
    method: "GET",
    signal,
  });
};

export const getWalletWalletBalanceRetrieveQueryKey = () => {
  return [`/api/wallet/wallet/balance/`] as const;
};

export const getWalletWalletBalanceRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof walletWalletBalanceRetrieve>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof walletWalletBalanceRetrieve>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getWalletWalletBalanceRetrieveQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof walletWalletBalanceRetrieve>>
  > = ({ signal }) => walletWalletBalanceRetrieve(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof walletWalletBalanceRetrieve>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type WalletWalletBalanceRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof walletWalletBalanceRetrieve>>
>;
export type WalletWalletBalanceRetrieveQueryError = unknown;

export function useWalletWalletBalanceRetrieve<
  TData = Awaited<ReturnType<typeof walletWalletBalanceRetrieve>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof walletWalletBalanceRetrieve>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof walletWalletBalanceRetrieve>>,
          TError,
          Awaited<ReturnType<typeof walletWalletBalanceRetrieve>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWalletWalletBalanceRetrieve<
  TData = Awaited<ReturnType<typeof walletWalletBalanceRetrieve>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof walletWalletBalanceRetrieve>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof walletWalletBalanceRetrieve>>,
          TError,
          Awaited<ReturnType<typeof walletWalletBalanceRetrieve>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useWalletWalletBalanceRetrieve<
  TData = Awaited<ReturnType<typeof walletWalletBalanceRetrieve>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof walletWalletBalanceRetrieve>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useWalletWalletBalanceRetrieve<
  TData = Awaited<ReturnType<typeof walletWalletBalanceRetrieve>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof walletWalletBalanceRetrieve>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getWalletWalletBalanceRetrieveQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
